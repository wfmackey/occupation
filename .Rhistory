!grepl('lfs.anyage.uniform', group))
print("using lfs.anyage")
title <- paste0("Labour force status of [", pairlabel[1],"] and [", pairlabel[2], "], 18-65 year olds")
}
}
# If both dip and bach (will be overridden if either dip or bach)
subtitle <- "B. = bachelor;  D. = diploma"
facetcol <- ceiling(length(fields))/2
if(level == "dip") {
usedata <- filter(usedata, !grepl('B.', qualfield ))
# usedata <- filter(usedata, str_detect(qualfield, 'D. '))
subtitle <- "D.  = diploma"
facetcol <- ceiling(length(fields))/2 + 1
}
if(level == "bach") {
usedata <- filter(usedata, !grepl('D.', qualfield ))
subtitle <- "B.  = bachelor"
facetcol <- ceiling(length(fields))/2 + 1
}
lfs.current.chart <- usedata %>%
filter(code == pair[1] | code == pair[2]) %>%
arrange(code) %>%
filter(qualfield %in% chartfields) %>%
ggplot(aes(x = year, color=lfs, group=interaction(lfs, code))) +
geom_line(aes(y = pc, linetype = code), stat="identity") +
geom_point(aes(y = pc), stat="identity") +
theme_minimal() +
labs(title = title,
subtitle = subtitle,
x = "",
y = ""
) +
theme(plot.title    = element_text(size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic"),
legend.position="bottom",
legend.title = element_blank(),
legend.text = element_text(size=8),
strip.text.x = element_text(size = 10, colour = "black"),
axis.text.x=element_text(size=8, angle = 90),
panel.grid.major.x=element_blank()
) +
scale_y_continuous(breaks = seq(0, 1, .1),
minor_breaks = seq(0 , 1, .05)) +
scale_color_manual(labels = lfs.labels,
values =  lfs.colors) +
scale_linetype_manual(labels = pairlabel,
values = c("solid", "dotted")) +
facet_wrap(. ~ qualfield, ncol= facetcol,
labeller = label_wrap_gen(width = 10)) +
NULL
if (display == TRUE) plot(lfs.current.chart)
current.chart.name <- paste0("lfs_",age,"age_",level,"level_",pair[1],"_",pair[2],".pdf")
ggsave(current.chart.name, plot = last_plot(), device = "pdf", path = "plots",
scale = 1, width = 297, height = 210, units = "mm",
dpi = 320, limitsize = TRUE)
}
##3.2: occ.chart ####
occ.chart <- function(age = "all",
uniform = TRUE,
level = "bach",
pair = c("m.mar", "f"),
chartfields = fields,
display = TRUE) {
pair <- sort(pair)
pairlabel <- c("", "")
for (x in 1:2) {
if (pair[x] == "m") {
pairlabel[x] <- c("Male")
}
if (pair[x] == "f") {
pairlabel[x] <- c("Female")
}
if (pair[x] == "f.nochild") {
pairlabel[x] <- c("Female, no child")
}
if (pair[x] == "f.haschild") {
pairlabel[x] <- c("Female, has child")
}
if (pair[x] == "m.mar") {
pairlabel[x] <- c("Male, married")
}
if (pair[x] == "f.mar") {
pairlabel[x] <- c("Female, married")
}
if (pair[x] == "f.nochild.mar") {
pairlabel[x] <- c("Female married no child")
}
if (pair[x] == "f.haschild.mar") {
pairlabel[x] <- c("Female married has child")
}
if (pair[x] == "m.unmar") {
pairlabel[x] <- c("Male, unmarried")
}
if (pair[x] == "f.unmar") {
pairlabel[x] <- c("Female, unmarried")
}
if (pair[x] == "f.nochild.unmar") {
pairlabel[x] <- c("Female unmarried no child")
}
if (pair[x] == "f.haschild.unmar") {
pairlabel[x] <- c("Female unmarried has child")
}
}
if(age == "2534") {
if(uniform == TRUE) {
usedata <- occ.combined %>% filter(grepl('occ.2534.uniform', group))
print("using occ.2534.uniform")
title <- paste0("Occupations of of (", pairlabel[1],") & (", pairlabel[2], "), 25-34 year olds (uniform age-weighted)")
}
else {
usedata <- occ.combined %>% filter(grepl('occ.2534', group),
!grepl('occ.2534.uniform', group))
print("using occ.2534")
title <- paste0("Occupations of of (", pairlabel[1],") & (", pairlabel[2], "), 25-34 year olds")
}
} else {
if(uniform == TRUE) {
usedata <- occ.combined %>% filter(grepl('occ.anyage.uniform', group))
print("using occ.anyage.uniform")
title <- paste0("Occupations of of [", pairlabel[1],"] and [", pairlabel[2], "], 18-65 year olds (uniform age-weighted)")
} else {
usedata <- occ.combined %>% filter(grepl('occ.anyage', group),
!grepl('occ.anyage.uniform', group))
print("using occ.anyage")
title <- paste0("Occupations of of [", pairlabel[1],"] and [", pairlabel[2], "], 18-65 year olds")
}
}
# If both dip and bach (will be overridden if either dip or bach)
subtitle <- "B. = bachelor;  D. = diploma"
facetcol <- ceiling(length(fields))/2
if(level == "dip") {
usedata <- filter(usedata, !grepl('B.', qualfield ))
# usedata <- filter(usedata, str_detect(qualfield, 'D. '))
subtitle <- "D.  = diploma"
facetcol <- ceiling(length(fields))/2 + 1
}
if(level == "bach") {
usedata <- filter(usedata, !grepl('D.', qualfield ))
subtitle <- "B.  = bachelor"
facetcol <- ceiling(length(fields))/2 + 1
}
occ.current.chart <- usedata %>%
filter(code == pair[1] | code == pair[2]) %>%
arrange(code) %>%
filter(qualfield %in% chartfields) %>%
ggplot(aes(x = year, color=occ, group=interaction(occ, code))) +
geom_line(aes(y = pc, linetype = code), stat="identity") +
geom_point(aes(y = pc), stat="identity") +
theme_minimal() +
labs(title = title,
subtitle = subtitle,
x = "",
y = ""
) +
theme(plot.title    = element_text(size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic"),
legend.position="bottom",
legend.title = element_blank(),
legend.text = element_text(size=8),
strip.text.x = element_text(size = 10, colour = "black"),
axis.text.x=element_text(size=8, angle = 90),
panel.grid.major.x=element_blank()
) +
scale_y_continuous(breaks = seq(0, 1, .1),
minor_breaks = seq(0 , 1, .05)) +
scale_color_manual(labels = occ.labels,
values =  occ.colors) +
scale_linetype_manual(labels = pairlabel,
values = c("solid", "dotted")) +
facet_wrap(. ~ qualfield, ncol= facetcol,
labeller = label_wrap_gen(width = 10)) +
NULL
if (display == TRUE) plot(occ.current.chart)
current.chart.name <- paste0("occ_",age,"age_",level,"level_",pair[1],"_",pair[2],".pdf")
ggsave(current.chart.name, plot = last_plot(), device = "pdf", path = "plots",
scale = 1, width = 297, height = 210, units = "mm",
dpi = 320, limitsize = TRUE)
}
##3.3: Flexible chart
##3.3: flex.chart ####
flex.chart <- function(type = lfs,
age = "all",
uniform = TRUE,
level = "bach",
pair = c("m.mar", "f.haschild"),
chartfields = fields,
display = TRUE,
save = TRUE) {
typename <- deparse(substitute(type))
pair <- sort(pair)
pairlabel <- c("", "")
for (x in 1:2) {
if (pair[x] == "m") {
pairlabel[x] <- c("Male")
}
if (pair[x] == "f") {
pairlabel[x] <- c("Female")
}
if (pair[x] == "f.nochild") {
pairlabel[x] <- c("Female, no child")
}
if (pair[x] == "f.haschild") {
pairlabel[x] <- c("Female, has child")
}
if (pair[x] == "m.mar") {
pairlabel[x] <- c("Male, married")
}
if (pair[x] == "f.mar") {
pairlabel[x] <- c("Female, married")
}
if (pair[x] == "f.nochild.mar") {
pairlabel[x] <- c("Female married no child")
}
if (pair[x] == "f.haschild.mar") {
pairlabel[x] <- c("Female married has child")
}
if (pair[x] == "m.unmar") {
pairlabel[x] <- c("Male, unmarried")
}
if (pair[x] == "f.unmar") {
pairlabel[x] <- c("Female, unmarried")
}
if (pair[x] == "f.nochild.unmar") {
pairlabel[x] <- c("Female unmarried no child")
}
if (pair[x] == "f.haschild.unmar") {
pairlabel[x] <- c("Female unmarried has child")
}
}
# Set labels and colours for each TYPE (this is called via TYPE within the ggplot function)
lfs.labels = c( "Employed FT",
"Employed PT",
"Employed AWAY",
"NILF",
"Unemployed")
lfs.colors = c( gred,
gorange,
gblack,
ggrey,
gyellow)
occ.labels = c( "Manager/prof.",
"Tech/trade",
"Sales/admin/service",
"Labourer/machine",
"Not working")
occ.colors = c( gorange,
gdark,
gred,
gdarkest,
ggrey)
# Get data
usedata <- get(paste0(typename,".combined"))
# Filter data according to settings:
# Uniform age-weighted method or not
if(uniform == TRUE) {
usedata <- usedata %>% filter(grepl('.uniform', group))
uniform.name <- ", (uniform age-weighted)"
} else {
usedata <- usedata %>% filter(!grepl('.uniform', group))
uniform.name <- ""
}
# Bach or diploma level, or both
# If both dip and bach (will be overridden if either dip or bach)
level.name <- "B. = bachelor;  D. = diploma"
facetcol <- ceiling(length(fields))/2
if(level == "dip") {
usedata <- filter(usedata, !grepl('B.', qualfield ))
facetcol <- ceiling(length(fields))/2 + 1
level.name <- "D. = diploma"
}
if(level == "bach") {
usedata <- filter(usedata, !grepl('D.', qualfield ))
facetcol <- ceiling(length(fields))/2 + 1
level.name <- "B. = bachelor"
}
## Age
if(age == "all"){
usedata <- usedata %>% filter(is.na(agegroup))
age.name <- "18-64 year old"
} else {
usedata <- usedata %>% filter(agegroup == age)
age.name <- paste0(substr(age, 1, 2),"-",substr(age, 3, 4)," year old")
}
##Create name
if(typename == "lfs"){
title <- paste0("Labour force status of ", age.name," [",pairlabel[1],"] & [", pairlabel[2],"]")
} else {
title <- paste0("Occupations of ", age.name," [",pairlabel[1],"] & [", pairlabel[2],"]")
}
subtitle <- paste0(level.name, uniform.name)
##Check number of rows:
print(nrow(usedata))
##Enquote type and facet to allow for use as a name in ggplot function
type <- enquo(type)
## Create chart
current.chart <- usedata %>%
filter(code == pair[1] | code == pair[2]) %>%
arrange(code) %>%
filter(qualfield %in% chartfields) %>%
ggplot(aes(x = year, color=!!type, group=interaction(!!type, code))) +
geom_line(aes(y = pc, linetype = code), stat="identity") +
geom_point(aes(y = pc), stat="identity") +
theme_minimal() +
labs(title = title,
subtitle = subtitle,
x = "",
y = ""
) +
theme(plot.title    = element_text(size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic"),
legend.position="bottom",
legend.title = element_blank(),
legend.text = element_text(size=8),
strip.text.x = element_text(size = 10, colour = "black"),
axis.text.x=element_text(size=8, angle = 90),
panel.grid.major.x=element_blank()
) +
scale_y_continuous(breaks = seq(0, 1, .1),
minor_breaks = seq(0 , 1, .05)) +
scale_color_manual(labels = get(paste0(typename,".labels")),
values =  get(paste0(typename,".colors"))) +
scale_linetype_manual(labels = pairlabel,
values = c("solid", "dotted")) +
facet_wrap(. ~ qualfield, ncol= facetcol,
labeller = label_wrap_gen(width = 10)) +
NULL
if (display == TRUE) plot(current.chart)
if (save == TRUE) {
chart.name <- paste0(typename, "_",age,"age_",level,"level_",pair[1],"_",pair[2],".pdf")
ggsave(chart.name, plot = last_plot(), device = "pdf", path = "plots",
scale = 1, width = 297, height = 210, units = "mm",
dpi = 320, limitsize = TRUE)
}
}
#4: Plotting####
runallcharts <- FALSE
## 4.1: LFS Charts ####
#Settings
lfs.labels = c( "Employed FT",
"Employed PT",
"Employed AWAY",
"NILF",
"Unemployed")
lfs.colors = c( gred,
gorange,
gblack,
ggrey,
gyellow)
# reminder: lfs.chart syntax, noting that uniform can only be used on 25-34
# lfs.chart(age = "all", uniform = FALSE, level = "bach", pair = c("m.", "f."))
# All pairs of codes:
allpairs <- combn(unique(lfs.combined$code),2)
# Create all possible permutations:
if (runallcharts == TRUE) {
for (age in c("all", "2534")) {
for (level in c("bach", "dip", "all")) {
for (x in 1:ncol(allpairs)) {
lfs.chart(age = age,
level = level,
pair = c(allpairs[1,x], allpairs[2,x]),
display = FALSE)
}
}
}
}
## 4.2: OCC Charts ####
#Settings
occ.labels = c( "Manager/prof.",
"Tech/trade",
"Sales/admin/service",
"Labourer/machine",
"Not working")
occ.colors = c( gorange,
gdark,
gred,
gdarkest,
ggrey)
# Generate all pairs
allpairs <- combn(unique(occ.combined$code),2)
# Create all possible permutations:
if (runallcharts == TRUE) {
for (age in c("all", "2534")) {
for (level in c("bach", "dip", "all")) {
for (x in 1:ncol(allpairs)) {
occ.chart(age = age,
level = level,
pair = c(allpairs[1,x], allpairs[2,x]),
display = FALSE)
}
}
}
}
#5: Adhoc Boomerang charts ####
#5.1 LF participation (45-44, 55-64) bachelor (male, female) by married v unmarried
for(a in c("4554","5564")) {
for(g in c("m","f")) {
flex.chart(type = lfs,
age = a,
pair = c(paste0(g,".mar"),paste0(g,".unmar")),
level = "bach",
display = TRUE
)
}
}
#5.2 LF participation (35-44, 45-54) bachelor (male, female) by married v unmarried
for(a in c("3544","4554")) {
flex.chart(type = lfs,
age = a,
pair = c("f.haschild.mar","f.haschild.unmar"),
level = "bach",
display = TRUE
)
}
#5.3 LF participation/occ (45-44) bachelor (female) by all AND by child/no child
for(a in c("4554")) {
flex.chart(type = lfs,
age = a,
pair = c("f.haschild","f.nochild"),
level = "bach",
display = TRUE
)
}
for(a in c("4554")) {
flex.chart(type = lfs,
age = a,
pair = c("f","m"),
level = "bach",
display = TRUE
)
}
for(a in c("4554")) {
flex.chart(type = occ,
age = a,
pair = c("f.haschild","f.nochild"),
level = "bach",
display = TRUE
)
}
for(a in c("4554")) {
flex.chart(type = occ,
age = a,
pair = c("f","m"),
level = "bach",
display = TRUE
)
}
#6: Additional charts ####
##6.1: marriage/child facet split
typename <- "lfs"
title <- "Chart title"
subtitle <- "Chart subtitle"
chartfields1 <- c("Y12",
"all",
"Engineering",
"Law",
"Medicine",
"Commerce",
"IT",
"Education")
chartfields2 <- c("Other health",
"Science (excl maths)",
"Nursing",
"Maths",
"Humanities",
"Other CA",
"Dentistry",
"Performing Arts",
"Agriculture")
for (x in 1:2) {
title <-    c("Labour force status of 25-34 year olds, by field of bachelor degree")
subtitle <- c(paste0("Page ",x," of 2"))
fieldgroup <- get(paste0("chartfields",x))
assign(paste0("chart",x),
lfs.combined %>%
filter(!is.na(mfc),
uniform == TRUE,
bach == TRUE,
agegroup == "2534") %>%
filter(field %in% fieldgroup) %>%
ggplot(aes(x = year, color=lfs, group=lfs)) +
geom_line(aes(y = pc), stat="identity") +
geom_point(aes(y = pc), stat="identity") +
theme_minimal() +
labs(title = title,
subtitle = subtitle,
x = "",
y = ""
) +
theme(plot.title    = element_text(size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic"),
legend.position="bottom",
legend.title = element_blank(),
legend.text = element_text(size=8),
strip.text.x = element_text(size = 10, colour = "black"),
axis.text.x=element_text(size=8, angle = 90),
panel.grid.major.x=element_blank()
) +
scale_y_continuous(breaks = seq(0, 1, .1),
minor_breaks = seq(0 , 1, .05)) +
scale_color_manual(labels = get(paste0(typename,".labels")),
values =  get(paste0(typename,".colors"))) +
# scale_linetype_manual(labels = pairlabel,
#                       values = c("solid", "dotted")) +
facet_wrap(. ~ field + mfc,
ncol= 12,
labeller = label_wrap_gen(width = 10)
) +
NULL
)
}
chart1
ggThemeAssist:::ggThemeAssistAddin()
